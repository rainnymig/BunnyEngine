#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : enable

#include "pbr.glsl"
#include "rt.glsl"

//  https://stackoverflow.com/questions/60549218/what-use-has-the-layout-specifier-scalar-in-ext-scalar-block-layout
layout(buffer_reference, scalar) buffer Vertices {Vertex v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices {uint i[]; }; // Triangle indices

layout(std430, set = 1, binding = 0) buffer ObjectDataBuffer
{
    ObjectData objectData[];
};

//  buffer device addresses for the vertex and index buffer
layout(set = 1, binding = 1) uniform BufferData
{
    Vertices vertices;
    Indices indices;
};

//  top level acceleration structure for ray tracing
layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAcceStruct;

hitAttributeEXT vec2 hitAttributes;

layout(location = 0) rayPayloadInEXT LightHitInfo lightHitInfo;
layout(location = 1) rayPayloadEXT bool isShadowed;

void main()
{
    //  find object data of the instance
    ObjectData objData = objectData[gl_InstanceID];     
    //  find the idx of Index of the first vertex in the hit primitive
    //  it's calculated from the idx of the first index of the whole mesh 
    //  plus primitive id times number of vertices per primitive (3 per triangle)
    const uint firstIdxOfPrimitiveIndex = objData.firstIndex + gl_PrimitiveID * 3;
    //  find the 3 indices of the triangle
    //  need to add the vertex offset to it to get the actual position of the vertices in the vertex buffer
    const uint i0 = indices[firstIdxOfPrimitiveIndex] + objData.vertexOffset;
    const uint i1 = indices[firstIdxOfPrimitiveIndex + 1] + objData.vertexOffset;
    const uint i2 = indices[firstIdxOfPrimitiveIndex + 2] + objData.vertexOffset;
    //  find the 3 vertices of the triangle from the vertex buffer
    Vertex v0 = vertices[i0];
    Vertex v1 = vertices[i1];
    Vertex v2 = vertices[i2];

    const vec3 barycentrics = vec3(1.0 - hitAttributes.x - hitAttributes.y, hitAttributes.x, hitAttributes.y);
    const vec3 pos = v0.position * barycentrics.x + v1.position * barycentrics.y + v2.position * barycentrics.z;
    const vec3 worldPos = vec3(gl_ObjectToWorldEXT * vec4(pos, 1.0));

    const vec3 normal = v0.normal * barycentrics.x + v1.normal * barycentrics.y + v2.normal * barycentrics.z;
    const vec3 worldNormal = normalize(vec3(normal * gl_WorldToObjectEXT)); //  equal to inverse transposed objToWorld multiply normal vec

    //  trace a ray to each light
    //  only trace if this point can potentially see the ray
    isShadowed = false;
    uint lightCountCapped = min(lightCount, MAX_LIGHT_COUNT);
    uint rayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float tMin = 0.001;
    const uint shadowBit = 1;
    for (uint lightIdx = 0; lightIdx < lightCountCapped; lightIdx++)
    {
        Light light = lights[lightIdx];
        float lightDistance = 100000.0;
        vec3 lightDir;
        if (light.type == DIRECTIONAL)
        {
            lightDir = -light.dirOrPos;
        }
        else
        {
            vec3 vecToLight = light.dirOrPos - worldPos;
            lightDistance = length(vecToLight);
            lightDir = vecToLight / lightDistance;
        }
        isShadowed = false;
        if (dot(worldNormal, lightDir) > 0)
        {
            //  payload index 1 - can reach light
            traceRayEXT(topLevelAcceStruct, rayFlags, 0xff, 0, 0, 0, worldPos, tMin, lightDir, lightDistance, 1);
            if (isShadowed)
            {
                lightHitInfo.lights |= (shadowBit << lightIdx);
            }
        }
    }
}