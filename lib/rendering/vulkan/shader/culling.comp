#version 450

layout (local_size_x = 256) in;

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
    vec3 padding;
};

struct ObjectData
{
    mat4 model;
    mat4 invTransModel;
    vec3 scale;
    uint meshId;
    uint materialId;
};

struct Plane
{
    vec3 normal;            //  plane normal, should be normalized
    float distToOrigin;     //  distance from plane to the origin point
};

struct BoundingSphere
{
    vec3 center;
    float radius;
};

layout(std140, set = 0, binding = 0) uniform CullingData
{
    //  view frustum culling
    Plane frustumPlanes[6];

    //  occlusion culling
    mat4 viewMat;
    mat4 projMat;
    float zNear;
    float depthImageWidth;
    float depthImageHeight;
};

layout(set = 0,binding = 1) uniform sampler2D depthHierarchy;

layout(std430, set = 1, binding = 0) buffer ObjectDataBuffer
{
    ObjectData objectData[];
};

layout(std430, set = 2, binding = 0) buffer Bounds
{
    BoundingSphere boundingSpheres[];
};

layout(std430, set = 3, binding = 0) buffer DrawCommandBuffer
{
    DrawCommand commands[];
};

layout(std430, set = 3, binding = 1) buffer InstanceToObjectId
{
    uint instToObj[];
};

layout(std430, set = 4, binding = 0) buffer DebugBuffer
{
    vec4 debugData[];
};

layout( push_constant ) uniform PushConsts
{
    uint objectCount;
};

bool getBoundsForAxis(vec3 axis, vec3 center, float radius, float zNear, out vec3 p1, out vec3 p2)
{
    vec2 c = vec2(dot(axis, center), center.z);
    vec2 bounds[2];
    
    float rSquared = radius * radius;
    float tSquared = dot(center, center) - rSquared;
    bool cameraInsideSphere = tSquared <= 0;

    if (cameraInsideSphere)
    {
        return false;
    }

    vec2 v = (vec2(sqrt(tSquared), radius) / length(c));

    bool clipSphere = c.y + radius > zNear;

    if (clipSphere)
    {
        return false;
    }

    float k = sqrt(rSquared - (zNear - c.y)*(zNear - c.y));

    for (int i = 0; i < 2; i++)
    {
        //  row or column major?
        bounds[i] = mat2(v.x, -v.y, v.y, v.x) * c * v.x;

        v.y = -v.y; 
        k=-k;
    }

    p1 = bounds[1].x * axis;
    p1.z = bounds[1].y;
    p2 = bounds[0].x * axis;
    p2.z = bounds[0].y;

    return true;
}

vec3 project(mat4 proj, vec3 p)
{
    vec4 projected = proj * vec4(p, 1.0);
    return projected.xyz / projected.w;
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool getAABB(vec3 center, float radius, float nearZ, mat4 proj, out vec4 aabb)
{
    vec3 right, left, top, bottom;
    if (getBoundsForAxis(vec3(1, 0, 0), center, radius, nearZ, left, right) 
        && getBoundsForAxis(vec3(0, 1, 0), center, radius, nearZ, bottom, top))
    {
        aabb = vec4(project(proj, left).x, project(proj, bottom).y, project(proj, right).x, project(proj, top).y);
        return true;
    }
    return false;
}

bool isObjectInView(ObjectData obj, out vec4 db)
{
    bool isInView = true;

    BoundingSphere bs = boundingSpheres[obj.meshId];
    vec3 center = (obj.model * vec4(bs.center, 1.0)).xyz;
    float radius = bs.radius * max(obj.scale.x, max(obj.scale.y, obj.scale.z));

    for (int idx = 0; idx < 6; idx++)
    {
        Plane plane = frustumPlanes[idx];
        float objDistToOrigin = dot(center, plane.normal);
        float objDistToPlane = objDistToOrigin - plane.distToOrigin;

        isInView = isInView && (objDistToPlane > -radius);
    }

    if (isInView)
    {
        vec4 aabb;
        vec3 centerViewSpace = (viewMat * vec4(center, 1.0)).xyz;

        if (getAABB(centerViewSpace, radius, -zNear, projMat, aabb))
        {
            aabb = aabb.zyxw;
            aabb = aabb * vec4(0.5, 0.5, 0.5, 0.5) + 0.5;

            // db = aabb;

            float width = (aabb.z - aabb.x) * depthImageWidth;
            float height = (aabb.y - aabb.w) * depthImageHeight;
            
            float level = floor(log2(max(width, height)));

            float depth = textureLod(depthHierarchy, (aabb.xy + aabb.zw) / 2, level).x;
            // float depth1 = textureLod(depthHierarchy, aabb.xy, level).x;
            // float depth2 = textureLod(depthHierarchy, aabb.xw, level).x;
            // float depth3 = textureLod(depthHierarchy, aabb.zy, level).x;
            // float depth4 = textureLod(depthHierarchy, aabb.zw, level).x;
            // float depth = max(max(depth1, depth2), max(depth3, depth4));

            vec4 sphereTestPoint = vec4(centerViewSpace + vec3(0, 0, radius), 1.0);
            vec4 projected = projMat * sphereTestPoint;
			float depthSphere = projected.z/projected.w;

            isInView = isInView && depthSphere <= depth;

            db = vec4(level, depth, depthSphere, 1.0);
        }
    }
    
    return isInView;
}

void main()
{
    //  todo: should check whether gl_GlobalInvocationID.x is less than the number of objects
    //  because we may dispatch more threads than actual number of objects
    uint objId = gl_GlobalInvocationID.x;

    if (objId >= objectCount)
    {
        return;
    }

    ObjectData obj = objectData[objId];

    vec4 deb = vec4(0, 0, 0, 0);

    bool inView = isObjectInView(obj, deb);

    if (inView)
    {
        //  for now for simplicity, we assume only one surface per mesh
        //  so that we can use mesh id to index into commands array directly
        uint instCount = atomicAdd(commands[obj.meshId].instanceCount, 1); 
        uint instanceId = commands[obj.meshId].firstInstance + instCount;

        instToObj[instanceId] = objId;
        
    }
    debugData[objId] = deb;
}