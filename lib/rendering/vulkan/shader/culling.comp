#version 450

layout (local_size_x = 256) in;

//
//  input buffer holding object transform and bounding box and mesh id, sorted by mesh id
//  input uniform buffer holding view frustum data
//
//  output buffer holding object transform and mesh id, sorted by mesh id
//  output buffer holding draw indirect parameters
//      index count
//      instance count  - that's the main thing to be done here
//      first index
//      vertex offset   - can be just 0 if index is precalculated (like now), 
//                        or set the offset here and not pre calculate index (probably better)
//      first instance  - do we need to hack this to do something here?
//  output buffer holding draw count 
//      draw count      - number of draws, should be the number of elements in the draw indirect parameter buffer
//      

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
    vec3 padding;
};

struct ObjectData
{
    mat4 model;
    mat4 invTransModel;
};

struct BoundingSphere
{
    vec3 center;
    float radius;
}

layout(std140, set = 1, binding = 0) buffer ObjectDataBuffer
{
    ObjectData objectData[];
};

layout(std::140, set = 3, binding = 0) buffer DrawCommandBuffer
{
    DrawCommand commands[];
};

layout(set = 3, binding = 2) uniform CullingData
{
    
};

void main()
{

}