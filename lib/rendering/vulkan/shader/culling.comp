#version 450

layout (local_size_x = 256) in;

//
//  input buffer holding object transform and bounding box and mesh id, sorted by mesh id
//  input uniform buffer holding view frustum data
//
//  output buffer holding object transform and mesh id, sorted by mesh id
//  output buffer holding draw indirect parameters
//      index count
//      instance count  - that's the main thing to be done here
//      first index
//      vertex offset   - can be just 0 if index is precalculated (like now), 
//                        or set the offset here and not pre calculate index (probably better)
//      first instance  - do we need to hack this to do something here?
//  output buffer holding draw count 
//      draw count      - number of draws, should be the number of elements in the draw indirect parameter buffer
//      

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
    vec3 padding;
};

struct ObjectData
{
    mat4 model;
    mat4 invTransModel;
    vec3 scale;
    uint meshId;
};

struct Plane
{
    vec3 normal;            //  plane normal, should be normalized
    float distToOrigin;     //  distance from plane to the origin point
};

struct BoundingSphere
{
    vec3 center;
    float radius;
};

layout(std140, set = 0, binding = 0) uniform ViewFrustum
{
    Plane frustumPlanes[6];
};

layout(std430, set = 1, binding = 0) buffer ObjectDataBuffer
{
    ObjectData objectData[];
};

layout(std430, set = 2, binding = 0) buffer Bounds
{
    BoundingSphere boundingSpheres[];
};

layout(std430, set = 3, binding = 0) buffer DrawCommandBuffer
{
    DrawCommand commands[];
};

layout(std430, set = 3, binding = 1) buffer InstanceToObjectId
{
    uint instToObj[];
};

layout( push_constant ) uniform PushConsts
{
    uint objectCount;
};

bool isObjectInView(ObjectData obj)
{
    bool isInView = true;

    BoundingSphere bs = boundingSpheres[obj.meshId];
    vec3 center = (obj.model * vec4(bs.center, 1.0)).xyz;
    float radius = bs.radius * max(obj.scale.x, max(obj.scale.y, obj.scale.z));

    for (int idx = 0; idx < 6; idx++)
    {
        Plane plane = frustumPlanes[idx];
        float objDistToOrigin = dot(center, plane.normal);
        float objDistToPlane = objDistToOrigin - plane.distToOrigin;

        isInView = isInView && (objDistToPlane > radius);
    }
    
    return isInView;
}

void main()
{
    //  todo: should check whether gl_GlobalInvocationID.x is less than the number of objects
    //  because we may dispatch more threads than actual number of objects
    uint objId = gl_GlobalInvocationID.x;

    if (objId >= objectCount)
    {
        return;
    }

    ObjectData obj = objectData[objId];

    bool inView = isObjectInView(obj);

    if (inView)
    {
        //  for now for simplicity, we assume only one surface per mesh
        //  so that we can use mesh id to index into commands array directly
        uint instCount = atomicAdd(commands[obj.meshId].instanceCount, 1); 
        uint instanceId = commands[obj.meshId].firstInstance + instCount;

        instToObj[instanceId] = objId;
    }
}